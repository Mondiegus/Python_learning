# -*- coding: utf-8 -*-
"""CatsVSDogs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uI2y8OOTh07795a32Hdc0IT9XcR9dQp7
"""

# Commented out IPython magic to ensure Python compatibility.
from keras.models import Sequential
from keras.layers import Dense, Flatten, Conv2D, MaxPool2D, Dropout
from tensorflow.python.keras.preprocessing.image import ImageDataGenerator

import os
import zlib
import zipfile

import matplotlib.pylab as plt
import matplotlib.image as mpimage
# %matplotlib inline

!wget --no-check-certificate \
  https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip \
  -O /tmp/cats_and_dogs_filtered.zip

local_zip = '/tmp/cats_and_dogs_filtered.zip'
zip_ = zipfile.ZipFile(local_zip)
zip_.extractall('/tmp/catc_and_dogs_filtered')
zip_.close()

base_dir = '/tmp/catc_and_dogs_filtered/cats_and_dogs_filtered'

train_dir = os.path.join(base_dir, 'train')
validation_dir = os.path.join(base_dir, 'validation')

train_cats_dir = os.path.join(train_dir, 'cats')
validation_cats_dir = os.path.join(validation_dir, 'cats')

train_dogs_dir = os.path.join(train_dir, 'dogs')
validation_dogs_dir = os.path.join(validation_dir, 'dogs')

def plot_images(item_dir, top = 25):
  all_items_dirs = os.listdir(item_dir)
  item_files = [os.path.join(item_dir,file) for file in all_items_dirs][:top]

  plt.figure(figsize =(10,10))
  for idx, img_path in enumerate(item_files):
    plt.subplot(5, 5, idx+1)

    img = mpimage.imread(img_path)
    plt.imshow(img)

  plt.plt.tight_layout()

#plot_images(train_dogs_dir)

input_shape = (150,150,3)

model = Sequential([
    Conv2D(32, (3,3), input_shape=input_shape),
    MaxPool2D((2,2)),
    
    Conv2D(64, (3,3), activation = 'relu'),
    MaxPool2D((2,2)),
    
    Conv2D(64, (3,3), activation = 'relu'),
    MaxPool2D((2,2)),

    Flatten(),
    
    Dense(64, activation = 'relu'),
    Dropout(0.5),
    Dense(1, activation = 'sigmoid')

])

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
model.summary()

train_datagen = ImageDataGenerator(rescale = 1./255)
test_datagen = ImageDataGenerator(rescale = 1./255)

train_generator = train_datagen.flow_from_directory(
  train_dir,
  target_size = (150, 150),
  batch_size = 20,
  class_mode = 'binary'
)

validation_generator = train_datagen.flow_from_directory(
  validation_dir,
  target_size = (150, 150),
  batch_size = 20,
  class_mode = 'binary'
)

history = model.fit_generator(
  train_generator,
  steps_per_epoch = 100,
  epochs = 5,
  validation_data = validation_generator,
  validation_steps = 50,
  verbose = 2
)