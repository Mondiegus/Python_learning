# -*- coding: utf-8 -*-
"""RNN Cryptocurrency-predicting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qfEmAGVAzE_tH-Tr6hilC_zOBi9X5-ww
"""

from zipfile import ZipFile
with ZipFile('/content/drive/My Drive/RNN/crypto_data.zip', 'r') as zipObj:
   zipObj.extractall('/content/drive/My Drive/RNN/extracted/')

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard

import pandas as pd
import numpy as np
from sklearn import preprocessing  # pip install sklearn ... if you don't have it!
from collections import deque
import random
import time

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, LSTM, BatchNormalization
from tensorflow.keras.callbacks import TensorBoard
from tensorflow.keras.callbacks import ModelCheckpoint

SEQ_LEN = 60  # how long of a preceeding sequence to collect for RNN
FUTURE_PERIOD_PREDICT = 3  # how far into the future are we trying to predict?
RATIO_TO_PREDICT = "LTC-USD"


EPOCHS = 10  # how many passes through our data
BATCH_SIZE = 64  # how many batches? Try smaller batch if you're getting OOM (out of memory) errors.
NAME = f"{SEQ_LEN}-SEQ-{FUTURE_PERIOD_PREDICT}-PRED-{int(time.time())}"  # a unique name for the model

def classify(current: float, future: float) -> int:
  if (current<future):
    return 1
  else:
    return 0

def process_data(df):
  df = df.drop("future", 1)

  # Normalize all data standarize
  for col in df.columns:
    if col != "target":
      df[col] = df[col].pct_change()  # pct change "normalizes" the different currencies (each crypto coin has vastly diff values, we're really more interested in the other coin's movements)
      df.dropna(inplace=True)  # remove the nas created by pct_change
      df[col] = preprocessing.scale(df[col].values)  # scale between 0 and 1.
  df.dropna(inplace=True)  # cleanup again... jic. Those nasty NaNs love to creep in.

  # create set of lat 60 datas and based on that sequential data 

  sequential_data = []  # this is a list that will CONTAIN the sequences
  prev_days = deque(maxlen=SEQ_LEN)  # These will be our actual sequences. They are made with deque, which keeps the maximum length by popping out older values as new ones come in

  for i in df.values:  # iterate over the values
      prev_days.append([n for n in i[:-1]])  # store all but the target
      if len(prev_days) == SEQ_LEN:  # make sure we have 60 sequences!
          sequential_data.append([np.array(prev_days), i[-1]])  # append those bad boys!
  print(prev_days)
  random.shuffle(sequential_data)  # shuffle for good measure.

  # Create to lists from sequential data, which we will buy and sell
  buys = []  # list that will store our buy sequences and targets
  sells = []  # list that will store our sell sequences and targets

  for seq, target in sequential_data:  # iterate over the sequential data
    if target == 0:  # if it's a "not buy"
        sells.append([seq, target])  # append to sells list
    elif target == 1:  # otherwise if the target is a 1...
        buys.append([seq, target])  # it's a buy!

  random.shuffle(buys)  # shuffle the buys
  random.shuffle(sells)  # shuffle the sells!

  # Balanse data  
  lower = min(len(buys), len(sells))  # what's the shorter length?

  buys = buys[:lower]  # make sure both lists are only up to the shortest length.
  sells = sells[:lower]  # make sure both lists are only up to the shortest length.

  # Create new seqential data with same size of buy and sell
  sequential_data = buys+sells  # add them together
  random.shuffle(sequential_data)  # another shuffle, so the model doesn't get confused with all 1 class then the other.

  # Create train and test data
  X = []
  y = []

  for seq, target in sequential_data:  # going over our new sequential data
      X.append(seq)  # X is the sequences
      y.append(target)  # y is the targets/labels (buys vs sell/notbuy)
  # print(X)
  return np.array(X), y  # return X and y...and make X a numpy array! ..import numpy as np

main_df = pd.DataFrame()

ratios = ["BTC-USD", "LTC-USD", "BCH-USD", "ETH-USD"]
for ratio in ratios:
  df = pd.read_csv('/content/drive/My Drive/RNN/extracted/crypto_data/{}.csv'.format(ratio), names=['time', 'low', 'high', 'open', 'close', 'volume'])
  df.rename(columns={'close' : '{}_close'.format(ratio), 'volume' : '{}_volume'.format(ratio)}, inplace=True)
  df.set_index("time", inplace=True)   
  df = df[['{}_close'.format(ratio), '{}_volume'.format(ratio)]]

  if len(main_df) == 0:
    main_df = df 
  else:
    main_df = main_df.join(df)

main_df.fillna(method="ffill", inplace=True)
main_df.dropna(inplace=True)

main_df['future'] = main_df[f'{RATIO_TO_PREDICT}_close'].shift(-FUTURE_PERIOD_PREDICT)
main_df['target'] = list(map(classify, main_df[f'{RATIO_TO_PREDICT}_close'], main_df['future']))

sorted_main_df = main_df.sort_index(axis=0)
times = sorted_main_df.index.values  # get the times
last_5pct = sorted_main_df.index.values[-int(0.05*len(times))]  # get the last 5% of the times
test_df = sorted_main_df[(sorted_main_df.index.values<last_5pct)]
validation_df = sorted_main_df[(sorted_main_df.index.values>=last_5pct)]

X_train, y_train = process_data(test_df)
# X_test, y_test = process_data(validation_df)

print(X_train)

model = Sequential()
model.add(LSTM(128, input_shape=(X_train.shape[1:]), return_sequences=True))
model.add(Dropout(0.2))
model.add(BatchNormalization())  #normalizes activation outputs, same reason you want to normalize your input data.

model.add(LSTM(128, return_sequences=True))
model.add(Dropout(0.1))
model.add(BatchNormalization())

model.add(LSTM(128))
model.add(Dropout(0.2))
model.add(BatchNormalization())

model.add(Dense(32, activation='relu'))
model.add(Dropout(0.2))

model.add(Dense(2, activation='softmax'))

opt = tf.keras.optimizers.Adam(lr=0.001, decay=1e-6)

# Compile model
model.compile(
    loss='sparse_categorical_crossentropy',
    optimizer=opt,
    metrics=['accuracy']
)

tensorboard = TensorBoard(log_dir="logs/{}".format(NAME))

filepath = "RNN_Final-{epoch:02d}-{val_acc:.3f}"  # unique file name that will include the epoch and the validation acc for that epoch
# checkpoint = ModelCheckpoint("models/{}.model".format(filepath, monitor='val_acc', verbose=1, save_best_only=True, mode='max')) # saves only the best ones



history = model.fit(
    X_train, y_train,
    batch_size=BATCH_SIZE,
    epochs=EPOCHS,
    validation_data=(X_test, y_test),
    callbacks=[tensorboard],
)

score = model.evaluate(X_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])
# Save model
model.save("models/{}".format(NAME))

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir logs